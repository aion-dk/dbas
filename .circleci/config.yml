version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  docker: assemblyvoting/docker@1.1.3
  slack: circleci/slack@4.10.1
  ruby: assemblyvoting/ruby@1.0.0

jobs:
  api-tests:
    machine:
      image: ubuntu-2204:2022.04.2
    environment:
      ECR_REGISTRY_ID: "534003348933"
      AWS_REGION: "eu-west-1"
      DOCKER_BUILDKIT: "1"
      SSH_AUTH_SOCK: /tmp/circleci/ssh/ssh_agent.sock
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/ssh-access:
          VAR_SSH_KEY: PULL_SSH_KEY

      - run:
          name: Run rubocop for api
          command: ./bin/docker-tests rubocop

      - run:
          name: Run rspec test for api
          command: ./bin/docker-tests rspec

      - run:
          name: Run audit test for api
          command: ./bin/docker-tests audit

      - run:
          name: Run brakeman test for api
          command: ./bin/docker-tests brakeman

      - store_artifacts:
          path: ./api/rspec.xml
          destination: rspec.xml
      - store_artifacts:
          path: tests-outputs/coverage
          destination: coverage-file

      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  client-tests:
    machine:
      image: ubuntu-2204:2022.04.2
    environment:
      ECR_REGISTRY_ID: "534003348933"
      AWS_REGION: "eu-west-1"
      DOCKER_BUILDKIT: "1"
      SSH_AUTH_SOCK: /tmp/circleci/ssh/ssh_agent.sock
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/ssh-access:
          VAR_SSH_KEY: PULL_SSH_KEY

      - run:
          name: Run e2e test for the client
          command: ./bin/docker-tests e2e
      - run:
          name: Run component test for the client
          command: ./bin/docker-tests component
      - run:
          name: Run lint test for the client
          command: ./bin/docker-tests lint

      - store_artifacts:
          path: tests-outputs/playwright.xml
          destination: playwright.xml

      - store_artifacts:
          path: tests-outputs/vitest.xml
          destination: vitest.xml

      - store_artifacts:
          path: tests-outputs/artifacts

      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  build-and-push-api:
    machine:
      image: ubuntu-2204:2022.04.2
    environment:
      ECR_REGISTRY_ID: "534003348933"
      ECR_REPOSITORY: "service_name_placeholder-api"
      AWS_REGION: "eu-west-1"
      DOCKER_BUILDKIT: "1"
      SSH_AUTH_SOCK: /tmp/circleci/ssh/ssh_agent.sock
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/ssh-access:
          VAR_SSH_KEY: PULL_SSH_KEY
      - run:
          name: Build service_name_placeholder-api development
          command: |
            export ECR_REGISTRY="${ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            docker-compose build api
            docker tag api:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-latest
            docker tag api:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-main
            docker tag api:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"$(date "+%d-%m-%Y")"
            docker tag api:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"${CIRCLE_SHA1}"
            # TMP should be moved to a prod image
            docker tag api:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":latest
            docker tag api:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":main
      - run:
          name: Push api development
          command: |
            export ECR_REGISTRY="${ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-latest
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-main
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"$(date "+%d-%m-%Y")"
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"${CIRCLE_SHA1}"
            # TMP should be moved to a prod image
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":latest
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":main

      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-and-push-client:
    machine:
      image: ubuntu-2204:2022.04.2
    environment:
      ECR_REGISTRY_ID: "534003348933"
      ECR_REPOSITORY: "service_name_placeholder-client"
      AWS_REGION: "eu-west-1"
      DOCKER_BUILDKIT: "1"
      SSH_AUTH_SOCK: /tmp/circleci/ssh/ssh_agent.sock
    steps:
      - checkout
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-cli-version: latest
          public-registry: false
          region: eu-west-1
          registry-id: ECR_REGISTRY_ID
      - docker/ssh-access:
          VAR_SSH_KEY: PULL_SSH_KEY
      - run:
          name: Build service_name_placeholder-client development
          command: |
            export ECR_REGISTRY="${ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            docker-compose build client
            docker tag client:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-latest
            docker tag client:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-main
            docker tag client:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"$(date "+%d-%m-%Y")"
            docker tag client:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"${CIRCLE_SHA1}"
            # TMP should be moved to a prod image
            docker tag client:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":latest
            docker tag client:latest "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":main
      - run:
          name: Push SERVICE_NAME_PLACEHOLDER-client development
          command: |
            export ECR_REGISTRY="${ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-latest
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-main
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"$(date "+%d-%m-%Y")"
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":dev-"${CIRCLE_SHA1}"
            # TMP should be moved to a prod image
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":latest
            docker push "${ECR_REGISTRY}"/"${ECR_REPOSITORY}":main

      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  test-and-build-push:
    jobs:
      - api-tests:
          context:
            - "GIT"
            - "ECR-RW"
            - "slack"
      - client-tests:
          context:
            - "GIT"
            - "ECR-RW"
            - "slack"
      - build-and-push-api:
          context:
            - "GIT"
            - "ECR-RW"
            - "slack"
## Must be enable when test can pass
#          requires:
#            - api-tests
      - build-and-push-client:
          context:
            - "GIT"
            - "ECR-RW"
            - "slack"
## Must be enable when test can pass
#          requires:
#            - client-tests
